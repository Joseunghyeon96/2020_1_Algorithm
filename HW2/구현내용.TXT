1. [20 pt] To-do list를 Priority Queue 또는 max-heap을 이용하여 구현하시오 (즉, 자신의 할 일에 우선 순
위를 매겨서 힙에 저장했다가 우선순위 순으로 꺼내서 출력하는 프로그램을 작성하시오). 실행 결과는 아래와
같은 형태로서, Insert(i) 와 Delete(d) 메뉴를 이용하여 우선 순위와 해야 할 일을 입력하고 (insert), 가장 우
선순위가 높은 해야 할 일을 꺼내서 삭제하는 (delete) 두 가지 task를 제공하도록 한다.
 <실행 결과 예>
 Menu: Insert (i/I), Delete (d/D): i, Quit(q/Q)
 ===================
 To do: Writing an email
 Precedence: 10
 Precedence 10, “Writing an email” is inserted.
 Menu: Insert (i/I), Delete (d/D), Quit(q/Q): i
 ===================
 To do: Cleaning my room
 Precedence: 8
 Precedence 8, “Cleaning my room” is inserted.
 Menu: Insert (i/I), Delete (d/D), Quit(q/Q): i
 ===================
 To do: Doing Algorithm homework
 Precedence: 1
 Precedence 1, “Doing Algorithm homework” is inserted.
 Menu: Insert (i/I), Delete (d/D), Quit(q/Q): d
 ===================
 To do: Doing Algorithm homework
 Precedence: 1
 Precedence 1, “Doing Algorithm homework” is deleted.
 Menu: Insert (i/I), Delete (d/D), Quit(q/Q): q
 ===================
 Bye~
 위의 실행 결과 예처럼, 메뉴에서 사용자는 insert와 delete를 할 수 있고, q/Q 를 입력시 프로그램을 종료
하도록 한다. insert 수행 시는 해야 할 일과 우선 순위를 입력하며, delete 수행 시는 현재 우선 순위가 가장 높은
할 일을 화면에 표시하고, 이를 삭제한다. 사용자가 q 또는 Q 값을 입력시 화면에 “Bye~”라고 표시한 후, 프로그
램을 종료한다. (해야 할 일 리스트는 위의 예시를 포함하여, 구현시 적어도 5개 이상의 다른 우선 순위를 정의하
고 입력한 후, 이를 테스트함)


2. 허프만 코드를 계산하고 생성.

3. 연결된 그래프 G의 간선들 중에서 그 간선을 제거하면 연결이 끊어지는 간선 (u, v) 를 브리지 (bridge)
라고 한다 
그래프에서 간선이 모두 몇 개인지 확인하시오 (단, 그래프의 입력은 인접
행렬을 이용하고, 결과 스크린 샷을 첨부) (15pt).

4. threaded binary tree